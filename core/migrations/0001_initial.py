# Generated by Django 5.2.4 on 2025-10-21 23:53

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(default='Культура речи и стилистика', max_length=200, verbose_name='Название курса')),
                ('description', models.TextField(blank=True, verbose_name='Описание')),
                ('cover_image', models.ImageField(blank=True, null=True, upload_to='course_covers/', verbose_name='Обложка')),
                ('published', models.BooleanField(default=False, verbose_name='Опубликован')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
            ],
            options={
                'verbose_name': 'Курс',
                'verbose_name_plural': 'Курсы',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.CharField(choices=[('student', 'Ученик'), ('teacher', 'Учитель'), ('manager', 'Менеджер')], default='student', max_length=20, verbose_name='Роль')),
                ('avatar', models.ImageField(blank=True, null=True, upload_to='avatars/', verbose_name='Аватар')),
                ('bio', models.TextField(blank=True, verbose_name='О себе')),
                ('phone', models.CharField(blank=True, max_length=20, verbose_name='Телефон')),
                ('is_teacher_approved', models.BooleanField(default=False, verbose_name='Учитель подтверждён')),
                ('groups', models.ManyToManyField(blank=True, help_text='Группы, к которым принадлежит пользователь.', related_name='core_user_groups', to='auth.group', verbose_name='Группы')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Индивидуальные разрешения пользователя.', related_name='core_user_permissions', to='auth.permission', verbose_name='Разрешения пользователя')),
            ],
            options={
                'verbose_name': 'Пользователь',
                'verbose_name_plural': 'Пользователи',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Module',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=200, verbose_name='Название модуля')),
                ('description', models.TextField(blank=True, verbose_name='Описание')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='modules', to='core.course', verbose_name='Курс')),
            ],
            options={
                'verbose_name': 'Модуль',
                'verbose_name_plural': 'Модули',
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='Lesson',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=200, verbose_name='Название занятия')),
                ('content', models.TextField(blank=True, verbose_name='Содержание')),
                ('video_url', models.URLField(blank=True, null=True, verbose_name='URL видео')),
                ('is_free_preview', models.BooleanField(default=False, verbose_name='Бесплатный предпросмотр')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('module', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lessons', to='core.module', verbose_name='Модуль')),
            ],
            options={
                'verbose_name': 'Занятие',
                'verbose_name_plural': 'Занятия',
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='Resource',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=200, verbose_name='Название материала')),
                ('file', models.FileField(blank=True, null=True, upload_to='resources/', verbose_name='Файл')),
                ('url', models.URLField(blank=True, null=True, verbose_name='Ссылка')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата добавления')),
                ('lesson', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='resources', to='core.lesson', verbose_name='Занятие')),
            ],
            options={
                'verbose_name': 'Материал',
                'verbose_name_plural': 'Материалы',
            },
        ),
        migrations.CreateModel(
            name='Test',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=200, verbose_name='Название теста')),
                ('description', models.TextField(blank=True, verbose_name='Описание')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('module', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tests', to='core.module', verbose_name='Модуль')),
            ],
            options={
                'verbose_name': 'Тест',
                'verbose_name_plural': 'Тесты',
            },
        ),
        migrations.CreateModel(
            name='TestQuestion',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('text', models.TextField(verbose_name='Текст вопроса')),
                ('correct_answer', models.CharField(blank=True, max_length=200, verbose_name='Правильный ответ')),
                ('max_score', models.PositiveIntegerField(default=10, verbose_name='Максимальный балл')),
                ('test', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='questions', to='core.test', verbose_name='Тест')),
            ],
            options={
                'verbose_name': 'Вопрос теста',
                'verbose_name_plural': 'Вопросы теста',
            },
        ),
        migrations.CreateModel(
            name='TestSubmission',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('score', models.FloatField(default=0, verbose_name='Балл')),
                ('submitted_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата отправки')),
                ('passed', models.BooleanField(default=False, verbose_name='Пройден')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='test_submissions', to=settings.AUTH_USER_MODEL, verbose_name='Студент')),
                ('test', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='submissions', to='core.test', verbose_name='Тест')),
            ],
            options={
                'verbose_name': 'Ответ на тест',
                'verbose_name_plural': 'Ответы на тесты',
            },
        ),
        migrations.CreateModel(
            name='TestAnswer',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('answer_text', models.CharField(blank=True, max_length=200, verbose_name='Ответ студента')),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='answers', to='core.testquestion', verbose_name='Вопрос')),
                ('submission', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='answers', to='core.testsubmission', verbose_name='Ответ на тест')),
            ],
            options={
                'verbose_name': 'Ответ на вопрос теста',
                'verbose_name_plural': 'Ответы на вопросы теста',
            },
        ),
        migrations.CreateModel(
            name='Progress',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('completed_at', models.DateTimeField(blank=True, null=True, verbose_name='Дата завершения')),
                ('passed', models.BooleanField(default=False, verbose_name='Пройдено')),
                ('lesson', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='progress', to='core.lesson', verbose_name='Занятие')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='progress', to=settings.AUTH_USER_MODEL, verbose_name='Студент')),
            ],
            options={
                'verbose_name': 'Прогресс',
                'verbose_name_plural': 'Прогресс',
                'unique_together': {('student', 'lesson')},
            },
        ),
    ]
